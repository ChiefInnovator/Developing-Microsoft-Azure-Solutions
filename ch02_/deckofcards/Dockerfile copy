#
# Base image for deploying and running based on Ubuntu
#
# This is to support ASP.NET and does not include .NET SDK or NodeJs
# 
FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-bionic AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443



#
##
## Base image for building .NET based on Ubuntu
##
## 1. Uses .NET SDK image as the starting point 
## 2. Updates the image and installs NodeJs 12.x LTS
##
##FROM mcr.microsoft.com/dotnet/core/sdk:3.1-bionic AS build
##WORKDIR /src
##COPY ["deckofcards.csproj", "./"]
##RUN dotnet restore "./deckofcards.csproj"
##COPY . .
##WORKDIR "/src/."
##RUN dotnet build "deckofcards.csproj" -c Release -o /app/build
#
##
## Base image for building React based on Node/Ubuntu
##
#FROM node:12.18-buster-slim AS clientbuild
#WORKDIR /src
#COPY ./ClientApp /app/ClientApp
#WORKDIR "/app/ClientApp"
#RUN npm install
#RUN npm run build
#
##
## Copy application to /app/publish directory and add ENTRYPOINT
##
#FROM base AS final
#WORKDIR /clientapp
#COPY --from=clientbuild /app/ClientApp/build .
##WORKDIR /app
##COPY --from=build /app/build .
##ENTRYPOINT ["dotnet", "deckofcards.dll"]
#
## RUN curl --silent --location https://deb.nodesource.com/setup_12.x | bash -
## RUN apt-get update
## RUN apt-get install --yes apt-utils
## RUN apt-get install --yes nodejs
## RUN npm install npm -g
#
##
## Call dotnet restore and publish
##
## 1. Restore will download any NuGet dependencies
## 2. Publish will perform a dotnet build
## #
## FROM build as publish
## WORKDIR /src
## COPY ["deckofcards.csproj", "./"]
## RUN dotnet restore "./deckofcards.csproj"
## COPY . .
## WORKDIR "/src/."
## RUN dotnet build "deckofcards.csproj" -c Release -o /app/build
#
##
##
##
## FROM build as publish
#
##
## Copy application to /app/publish directory and add ENTRYPOINT
##
## FROM base AS final
## WORKDIR /app
## COPY --from=publish /app/publish .
## COPY --from=publish/ClientApp
## ENTRYPOINT ["dotnet", "deckofcards.dll"]